
scalar Date
scalar DateTime


type Query {
   searchAccounts(filter: AccountsFilter): [Accounts!]
}

type Accounts {
  account_id: String
  id: ID
  someUUID : String
  someString : String
  limit: String
  products: [String]
  sampleUserTestCaseSubmissions(filter: SampleUserTestCaseSubmissionsFilter) : SampleUserTestCaseSubmissions
}

type SampleUserTestCaseSubmissions{
   stdin : String
   and: [SampleUserTestCaseSubmissions!]
   or: [SampleUserTestCaseSubmissions!]
   not: SampleUserTestCaseSubmissions
}

input SampleUserTestCaseSubmissionsFilter {
    stdin: StringExpression

}


input AccountsFilter {
   account_id: IntExpression
   limit: IntExpression
   someUUID : UUIDExpression
   someString : StringExpression

   and: [AccountsFilter!]
   or: [AccountsFilter!]
   not: AccountsFilter
}

input UUIDExpression {
    uuidEquals : String
}


# Define String expression
input StringExpression {
   equals: String
   contains: String
   in: [String!]
}


# Define Int Expression
input IntExpression {
   eq: Int
   gt: Int
   gte: Int
   lt: Int
   lte: Int
   in: [Int!]
   between: [Int!]
}

input DateTimeExpression {
    eq: DateTime
    gt: DateTime
    gte: DateTime
    lt: DateTime
    lte: DateTime
    between: [DateTime!]
}

input DateExpression {
    eq: Date
    gt: Date
    gte: Date
    lt: Date
    lte: Date
    between: [Date!]
}